Timer unit: 1e-06 s

Total time: 0.763012 s
File: <ipython-input-9-992fc7564111>
Function: metropolis_hastings at line 3

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     3                                               def metropolis_hastings(self, X, y, semilla):
     4                                                   '''
     5                                                   Muestrea el espacio de los parametros mediante Metropolis-Hastings
     6                                                   '''
     7                                           
     8                                                   # asegura replicabilidad
     9         1         10.0     10.0      0.0          np.random.seed(semilla)
    10                                           
    11                                                   # obtiene distribucion a priori y candidatos
    12         1        923.0    923.0      0.1          distribucion_priori = self.get_priori()
    13         1       4564.0   4564.0      0.6          W_candidatos = self.get_metropolis_hastings_candidatos()
    14         1         33.0     33.0      0.0          U_aceptacion = self.get_metropolis_hastings_uniformes()
    15                                           
    16                                                   # contador de candidatos aceptados
    17         1          1.0      1.0      0.0          aceptados = 0
    18                                                   
    19                                                   # Se guardan valores calculados aqui
    20         1          0.0      0.0      0.0          lpa=[]
    21         1          1.0      1.0      0.0          lva=[]
    22                                           
    23      1001       1198.0      1.2      0.2          for i, w_candidato in enumerate(W_candidatos):
    24                                           
    25                                                       # localiza distribucion candidatos en w_actual
    26      1000       1137.0      1.1      0.1              w_actual = self.traza[i]
    27      1000       4267.0      4.3      0.6              w_candidato += w_actual
    28                                                       
    29      1000        856.0      0.9      0.1              if i>0:
    30       999       1264.0      1.3      0.2                  prior_a = lpa.pop()
    31       999        921.0      0.9      0.1                  ver_a = lva.pop()
    32                                                       else:
    33                                                           # solo es necesario calcularlo la primera iteracion
    34         1         73.0     73.0      0.0                  prior_a = distribucion_priori.logpdf(w_actual)
    35         1       1136.0   1136.0      0.1                  ver_a = self._log_verosimilitud(w_actual, X, y)
    36                                                           
    37                                                       # calcula prior
    38      1000      48045.0     48.0      6.3              prior_c = distribucion_priori.logpdf(w_candidato)
    39      1000       1332.0      1.3      0.2              delta_prior = prior_c - prior_a
    40                                           
    41                                                       # calcula verosimilitud
    42      1000     685600.0    685.6     89.9              ver_c = self._log_verosimilitud(w_candidato, X, y)
    43      1000       1778.0      1.8      0.2              delta_verosimilitud = ver_c - ver_a
    44                                           
    45                                                       # probabilidad de aceptacion
    46      1000       2236.0      2.2      0.3              p_aceptacion = math.exp(delta_verosimilitud + delta_prior)
    47                                           
    48      1000       2028.0      2.0      0.3              if U_aceptacion[i] < p_aceptacion:
    49                                           
    50                                                           # actualiza valor actual y contador de aceptados
    51       645        647.0      1.0      0.1                  w_actual = w_candidato
    52       645        543.0      0.8      0.1                  aceptados += 1
    53                                                           # se guardan valores del w_candidato, que serÃ¡ el w_actual de i+1
    54       645        796.0      1.2      0.1                  lpa.append(prior_c)
    55       645        535.0      0.8      0.1                  lva.append(ver_c)
    56                                                       else:
    57                                                           # se guardan valores del w_actual, que sera el w_actual de i+1
    58       355        466.0      1.3      0.1                  lpa.append(prior_a)
    59       355        285.0      0.8      0.0                  lva.append(ver_a)
    60                                           
    61      1000       2336.0      2.3      0.3              self.traza[i + 1] = w_actual
    62                                           
    63                                                   # almacena la proporcion de candidatos aceptados
    64         1          1.0      1.0      0.0          self.proporcion_aceptacion = aceptados / self.n_muestras