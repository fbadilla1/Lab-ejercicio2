Timer unit: 1e-06 s

Total time: 0.790811 s
File: <ipython-input-9-67d1b4ed7a5a>
Function: metropolis_hastings at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                               def metropolis_hastings(self, X, y, semilla):
     5                                                   '''
     6                                                   Muestrea el espacio de los parametros mediante Metropolis-Hastings
     7                                                   '''
     8                                           
     9                                                   # asegura replicabilidad
    10         1         11.0     11.0      0.0          np.random.seed(semilla)
    11                                           
    12                                                   # obtiene distribucion a priori y candidatos
    13         1       1226.0   1226.0      0.2          distribucion_priori = self.get_priori()
    14         1       4799.0   4799.0      0.6          W_candidatos = self.get_metropolis_hastings_candidatos()
    15         1         35.0     35.0      0.0          U_aceptacion = self.get_metropolis_hastings_uniformes()
    16                                           
    17                                                   # contador de candidatos aceptados
    18         1          1.0      1.0      0.0          aceptados = 0
    19                                           
    20      1001       1185.0      1.2      0.1          for i, w_candidato in enumerate(W_candidatos):
    21                                           
    22                                                       # localiza distribucion candidatos en w_actual
    23      1000       1104.0      1.1      0.1              w_actual = self.traza[i]
    24      1000       4131.0      4.1      0.5              w_candidato += w_actual
    25                                           
    26                                                       # calcula prior
    27      1000      46368.0     46.4      5.9              delta_prior = distribucion_priori.logpdf(w_candidato) - \
    28      1000      33406.0     33.4      4.2                  distribucion_priori.logpdf(w_actual)
    29                                           
    30                                                       # calcula verosimilitud
    31      1000       1169.0      1.2      0.1              if self.ultimo_no_actualizado[0]:
    32       999     687437.0    688.1     86.9                  delta_verosimilitud = self._log_verosimilitud(w_candidato, X, y) - self.ultimo_no_actualizado[1]
    33                                                       else:
    34         1       1100.0   1100.0      0.1                  log_verosimilitud_actual = self._log_verosimilitud(w_actual, X, y)
    35         1        875.0    875.0      0.1                  delta_verosimilitud = self._log_verosimilitud(w_candidato, X, y) - log_verosimilitud_actual
    36                                                           
    37                                                       # probabilidad de aceptacion
    38      1000       2652.0      2.7      0.3              p_aceptacion = math.exp(delta_verosimilitud + delta_prior)
    39                                           
    40      1000       1931.0      1.9      0.2              if U_aceptacion[i] < p_aceptacion:
    41                                           
    42                                                           # actualiza valor actual y contador de aceptados
    43        33         32.0      1.0      0.0                  w_actual = w_candidato
    44        33         28.0      0.8      0.0                  aceptados += 1
    45                                                       else:
    46       967        992.0      1.0      0.1                  self.ultimo_no_actualizado = (True,log_verosimilitud_actual)
    47                                           
    48      1000       2328.0      2.3      0.3              self.traza[i + 1] = w_actual
    49                                           
    50                                                   # almacena la proporcion de candidatos aceptados
    51         1          1.0      1.0      0.0          self.proporcion_aceptacion = aceptados / self.n_muestras