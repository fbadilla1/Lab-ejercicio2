Timer unit: 1e-06 s

Total time: 0.887589 s
File: <ipython-input-9-67d1b4ed7a5a>
Function: metropolis_hastings at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                               def metropolis_hastings(self, X, y, semilla):
     5                                                   '''
     6                                                   Muestrea el espacio de los parametros mediante Metropolis-Hastings
     7                                                   '''
     8                                           
     9                                                   # asegura replicabilidad
    10         1         14.0     14.0      0.0          np.random.seed(semilla)
    11                                           
    12                                                   # obtiene distribucion a priori y candidatos
    13         1       1449.0   1449.0      0.2          distribucion_priori = self.get_priori()
    14         1       6540.0   6540.0      0.7          W_candidatos = self.get_metropolis_hastings_candidatos()
    15         1         47.0     47.0      0.0          U_aceptacion = self.get_metropolis_hastings_uniformes()
    16                                           
    17                                                   # contador de candidatos aceptados
    18         1          2.0      2.0      0.0          aceptados = 0
    19                                           
    20      1001       1603.0      1.6      0.2          for i, w_candidato in enumerate(W_candidatos):
    21                                           
    22                                                       # localiza distribucion candidatos en w_actual
    23      1000       1189.0      1.2      0.1              w_actual = self.traza[i]
    24      1000       4580.0      4.6      0.5              w_candidato += w_actual
    25                                           
    26                                                       # calcula prior
    27      1000      54572.0     54.6      6.1              delta_prior = distribucion_priori.logpdf(w_candidato) - \
    28      1000      38613.0     38.6      4.4                  distribucion_priori.logpdf(w_actual)
    29                                           
    30                                                       # calcula verosimilitud
    31      1000       1297.0      1.3      0.1              if self.ultimo_no_actualizado[0]:
    32       999     764861.0    765.6     86.2                  delta_verosimilitud = self._log_verosimilitud(w_candidato, X, y) - self.ultimo_no_actualizado[1]
    33                                                       else:
    34         1       1694.0   1694.0      0.2                  log_verosimilitud_actual = self._log_verosimilitud(w_actual, X, y)
    35         1       1459.0   1459.0      0.2                  delta_verosimilitud = self._log_verosimilitud(w_candidato, X, y) - log_verosimilitud_actual
    36                                                           
    37                                                       # probabilidad de aceptacion
    38      1000       3543.0      3.5      0.4              p_aceptacion = math.exp(delta_verosimilitud + delta_prior)
    39                                           
    40      1000       2370.0      2.4      0.3              if U_aceptacion[i] < p_aceptacion:
    41                                           
    42                                                           # actualiza valor actual y contador de aceptados
    43        33         43.0      1.3      0.0                  w_actual = w_candidato
    44        33         36.0      1.1      0.0                  aceptados += 1
    45                                                       else:
    46       967       1085.0      1.1      0.1                  self.ultimo_no_actualizado = (True,log_verosimilitud_actual)
    47                                           
    48      1000       2589.0      2.6      0.3              self.traza[i + 1] = w_actual
    49                                           
    50                                                   # almacena la proporcion de candidatos aceptados
    51         1          3.0      3.0      0.0          self.proporcion_aceptacion = aceptados / self.n_muestras